/*
 * NAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.trulioo.normalizedapi.api;

import com.trulioo.normalizedapi.ApiException;
import java.io.File;
import com.trulioo.normalizedapi.model.TransactionRecordResult;
import com.trulioo.normalizedapi.model.TransactionStatus;
import com.trulioo.normalizedapi.model.VerifyRequest;
import com.trulioo.normalizedapi.model.VerifyResult;
import com.trulioo.normalizedapi.model.VerifyResultPartial;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VerificationsApi
 */
@Disabled
public class VerificationsApiTest {

    private final VerificationsApi api = new VerificationsApi();

    /**
     * DocumentDownload
     *
     * Download Document
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentDownloadTest() throws ApiException {
        String transactionRecordID = null;
        String fieldName = null;
        File response = api.getDocumentDownload(transactionRecordID, fieldName);
        // TODO: test validations
    }

    /**
     * PartialResult
     *
     * This method is used to retrieve the partial result of an asynchronous transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartialResultTest() throws ApiException {
        String transactionID = null;
        VerifyResultPartial response = api.getPartialResult(transactionID);
        // TODO: test validations
    }

    /**
     * GetTransactionRecord
     *
     * This endpoint will provide the final results once the transaction completes. The response will have match signals per Name and Address fields and notify if the individual is verified. It may take a few minutes for the transaction to complete.Once the results are available, the callback status updates to “Success”. The Transaction Record ID (TRID) will be sent to the callback URL provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionRecordTest() throws ApiException {
        String transactionRecordID = null;
        TransactionRecordResult response = api.getTransactionRecord(transactionRecordID);
        // TODO: test validations
    }

    /**
     * GetTransactionStatus
     *
     * This method is used to retrieve the processing status of an asynchronous transaction. The response for this method includes the processing status of the verification, the TransactionID, the TransactionRecordID as well as whether the verification request has timed out.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionStatusTest() throws ApiException {
        String transactionID = null;
        TransactionStatus response = api.getTransactionStatus(transactionID);
        // TODO: test validations
    }

    /**
     * Verify
     *
     * Calling this method will perform a verification. If your account includes address cleansing set the CleansedAddress flag to get additional address information in the result. You can query configuration to get what fields are available to you in each each country. It is also possible to get sample requests from the customer portal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyTest() throws ApiException {
        VerifyRequest verifyRequest = null;
        VerifyResult response = api.verify(verifyRequest);
        // TODO: test validations
    }

}
