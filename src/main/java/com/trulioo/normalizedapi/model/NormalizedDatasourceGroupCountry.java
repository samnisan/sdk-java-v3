/*
 * NAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.trulioo.normalizedapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.trulioo.normalizedapi.model.NormalizedDatasourceField;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.trulioo.normalizedapi.JSON;

/**
 * Datasource group config for country
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-14T09:53:55.537580900-07:00[America/Los_Angeles]")
public class NormalizedDatasourceGroupCountry {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REQUIRED_FIELDS = "RequiredFields";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FIELDS)
  private List<NormalizedDatasourceField> requiredFields;

  public static final String SERIALIZED_NAME_OPTIONAL_FIELDS = "OptionalFields";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_FIELDS)
  private List<NormalizedDatasourceField> optionalFields;

  public static final String SERIALIZED_NAME_APPENDED_FIELDS = "AppendedFields";
  @SerializedName(SERIALIZED_NAME_APPENDED_FIELDS)
  private List<NormalizedDatasourceField> appendedFields;

  public static final String SERIALIZED_NAME_OUTPUT_FIELDS = "OutputFields";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FIELDS)
  private List<NormalizedDatasourceField> outputFields;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_UPDATE_FREQUENCY = "UpdateFrequency";
  @SerializedName(SERIALIZED_NAME_UPDATE_FREQUENCY)
  private String updateFrequency;

  public static final String SERIALIZED_NAME_COVERAGE = "Coverage";
  @SerializedName(SERIALIZED_NAME_COVERAGE)
  private String coverage;

  public NormalizedDatasourceGroupCountry() {
  }

  public NormalizedDatasourceGroupCountry name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public NormalizedDatasourceGroupCountry description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public NormalizedDatasourceGroupCountry requiredFields(List<NormalizedDatasourceField> requiredFields) {
    
    this.requiredFields = requiredFields;
    return this;
  }

  public NormalizedDatasourceGroupCountry addRequiredFieldsItem(NormalizedDatasourceField requiredFieldsItem) {
    if (this.requiredFields == null) {
      this.requiredFields = new ArrayList<>();
    }
    this.requiredFields.add(requiredFieldsItem);
    return this;
  }

   /**
   * Required Fields
   * @return requiredFields
  **/
  @javax.annotation.Nullable
  public List<NormalizedDatasourceField> getRequiredFields() {
    return requiredFields;
  }


  public void setRequiredFields(List<NormalizedDatasourceField> requiredFields) {
    this.requiredFields = requiredFields;
  }


  public NormalizedDatasourceGroupCountry optionalFields(List<NormalizedDatasourceField> optionalFields) {
    
    this.optionalFields = optionalFields;
    return this;
  }

  public NormalizedDatasourceGroupCountry addOptionalFieldsItem(NormalizedDatasourceField optionalFieldsItem) {
    if (this.optionalFields == null) {
      this.optionalFields = new ArrayList<>();
    }
    this.optionalFields.add(optionalFieldsItem);
    return this;
  }

   /**
   * Optional Fields
   * @return optionalFields
  **/
  @javax.annotation.Nullable
  public List<NormalizedDatasourceField> getOptionalFields() {
    return optionalFields;
  }


  public void setOptionalFields(List<NormalizedDatasourceField> optionalFields) {
    this.optionalFields = optionalFields;
  }


  public NormalizedDatasourceGroupCountry appendedFields(List<NormalizedDatasourceField> appendedFields) {
    
    this.appendedFields = appendedFields;
    return this;
  }

  public NormalizedDatasourceGroupCountry addAppendedFieldsItem(NormalizedDatasourceField appendedFieldsItem) {
    if (this.appendedFields == null) {
      this.appendedFields = new ArrayList<>();
    }
    this.appendedFields.add(appendedFieldsItem);
    return this;
  }

   /**
   * Appended Fields
   * @return appendedFields
  **/
  @javax.annotation.Nullable
  public List<NormalizedDatasourceField> getAppendedFields() {
    return appendedFields;
  }


  public void setAppendedFields(List<NormalizedDatasourceField> appendedFields) {
    this.appendedFields = appendedFields;
  }


  public NormalizedDatasourceGroupCountry outputFields(List<NormalizedDatasourceField> outputFields) {
    
    this.outputFields = outputFields;
    return this;
  }

  public NormalizedDatasourceGroupCountry addOutputFieldsItem(NormalizedDatasourceField outputFieldsItem) {
    if (this.outputFields == null) {
      this.outputFields = new ArrayList<>();
    }
    this.outputFields.add(outputFieldsItem);
    return this;
  }

   /**
   * Output Fields
   * @return outputFields
  **/
  @javax.annotation.Nullable
  public List<NormalizedDatasourceField> getOutputFields() {
    return outputFields;
  }


  public void setOutputFields(List<NormalizedDatasourceField> outputFields) {
    this.outputFields = outputFields;
  }


  public NormalizedDatasourceGroupCountry sourceType(String sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Source Type
   * @return sourceType
  **/
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }


  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public NormalizedDatasourceGroupCountry updateFrequency(String updateFrequency) {
    
    this.updateFrequency = updateFrequency;
    return this;
  }

   /**
   * Update Frequency
   * @return updateFrequency
  **/
  @javax.annotation.Nullable
  public String getUpdateFrequency() {
    return updateFrequency;
  }


  public void setUpdateFrequency(String updateFrequency) {
    this.updateFrequency = updateFrequency;
  }


  public NormalizedDatasourceGroupCountry coverage(String coverage) {
    
    this.coverage = coverage;
    return this;
  }

   /**
   * Coverage
   * @return coverage
  **/
  @javax.annotation.Nullable
  public String getCoverage() {
    return coverage;
  }


  public void setCoverage(String coverage) {
    this.coverage = coverage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormalizedDatasourceGroupCountry normalizedDatasourceGroupCountry = (NormalizedDatasourceGroupCountry) o;
    return Objects.equals(this.name, normalizedDatasourceGroupCountry.name) &&
        Objects.equals(this.description, normalizedDatasourceGroupCountry.description) &&
        Objects.equals(this.requiredFields, normalizedDatasourceGroupCountry.requiredFields) &&
        Objects.equals(this.optionalFields, normalizedDatasourceGroupCountry.optionalFields) &&
        Objects.equals(this.appendedFields, normalizedDatasourceGroupCountry.appendedFields) &&
        Objects.equals(this.outputFields, normalizedDatasourceGroupCountry.outputFields) &&
        Objects.equals(this.sourceType, normalizedDatasourceGroupCountry.sourceType) &&
        Objects.equals(this.updateFrequency, normalizedDatasourceGroupCountry.updateFrequency) &&
        Objects.equals(this.coverage, normalizedDatasourceGroupCountry.coverage);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, requiredFields, optionalFields, appendedFields, outputFields, sourceType, updateFrequency, coverage);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormalizedDatasourceGroupCountry {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    requiredFields: ").append(toIndentedString(requiredFields)).append("\n");
    sb.append("    optionalFields: ").append(toIndentedString(optionalFields)).append("\n");
    sb.append("    appendedFields: ").append(toIndentedString(appendedFields)).append("\n");
    sb.append("    outputFields: ").append(toIndentedString(outputFields)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    updateFrequency: ").append(toIndentedString(updateFrequency)).append("\n");
    sb.append("    coverage: ").append(toIndentedString(coverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("RequiredFields");
    openapiFields.add("OptionalFields");
    openapiFields.add("AppendedFields");
    openapiFields.add("OutputFields");
    openapiFields.add("SourceType");
    openapiFields.add("UpdateFrequency");
    openapiFields.add("Coverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NormalizedDatasourceGroupCountry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NormalizedDatasourceGroupCountry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormalizedDatasourceGroupCountry is not found in the empty JSON string", NormalizedDatasourceGroupCountry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NormalizedDatasourceGroupCountry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NormalizedDatasourceGroupCountry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("RequiredFields") != null && !jsonObj.get("RequiredFields").isJsonNull()) {
        JsonArray jsonArrayrequiredFields = jsonObj.getAsJsonArray("RequiredFields");
        if (jsonArrayrequiredFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RequiredFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RequiredFields` to be an array in the JSON string but got `%s`", jsonObj.get("RequiredFields").toString()));
          }

          // validate the optional field `RequiredFields` (array)
          for (int i = 0; i < jsonArrayrequiredFields.size(); i++) {
            NormalizedDatasourceField.validateJsonObject(jsonArrayrequiredFields.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("OptionalFields") != null && !jsonObj.get("OptionalFields").isJsonNull()) {
        JsonArray jsonArrayoptionalFields = jsonObj.getAsJsonArray("OptionalFields");
        if (jsonArrayoptionalFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OptionalFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OptionalFields` to be an array in the JSON string but got `%s`", jsonObj.get("OptionalFields").toString()));
          }

          // validate the optional field `OptionalFields` (array)
          for (int i = 0; i < jsonArrayoptionalFields.size(); i++) {
            NormalizedDatasourceField.validateJsonObject(jsonArrayoptionalFields.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("AppendedFields") != null && !jsonObj.get("AppendedFields").isJsonNull()) {
        JsonArray jsonArrayappendedFields = jsonObj.getAsJsonArray("AppendedFields");
        if (jsonArrayappendedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AppendedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AppendedFields` to be an array in the JSON string but got `%s`", jsonObj.get("AppendedFields").toString()));
          }

          // validate the optional field `AppendedFields` (array)
          for (int i = 0; i < jsonArrayappendedFields.size(); i++) {
            NormalizedDatasourceField.validateJsonObject(jsonArrayappendedFields.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("OutputFields") != null && !jsonObj.get("OutputFields").isJsonNull()) {
        JsonArray jsonArrayoutputFields = jsonObj.getAsJsonArray("OutputFields");
        if (jsonArrayoutputFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OutputFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OutputFields` to be an array in the JSON string but got `%s`", jsonObj.get("OutputFields").toString()));
          }

          // validate the optional field `OutputFields` (array)
          for (int i = 0; i < jsonArrayoutputFields.size(); i++) {
            NormalizedDatasourceField.validateJsonObject(jsonArrayoutputFields.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) && !jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
      if ((jsonObj.get("UpdateFrequency") != null && !jsonObj.get("UpdateFrequency").isJsonNull()) && !jsonObj.get("UpdateFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpdateFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpdateFrequency").toString()));
      }
      if ((jsonObj.get("Coverage") != null && !jsonObj.get("Coverage").isJsonNull()) && !jsonObj.get("Coverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Coverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Coverage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormalizedDatasourceGroupCountry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormalizedDatasourceGroupCountry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormalizedDatasourceGroupCountry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormalizedDatasourceGroupCountry.class));

       return (TypeAdapter<T>) new TypeAdapter<NormalizedDatasourceGroupCountry>() {
           @Override
           public void write(JsonWriter out, NormalizedDatasourceGroupCountry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NormalizedDatasourceGroupCountry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NormalizedDatasourceGroupCountry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NormalizedDatasourceGroupCountry
  * @throws IOException if the JSON string is invalid with respect to NormalizedDatasourceGroupCountry
  */
  public static NormalizedDatasourceGroupCountry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormalizedDatasourceGroupCountry.class);
  }

 /**
  * Convert an instance of NormalizedDatasourceGroupCountry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

